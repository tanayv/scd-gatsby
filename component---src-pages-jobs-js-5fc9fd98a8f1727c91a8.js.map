{"version":3,"sources":["webpack:///./src/components/grids/tiberian-grid.js","webpack:///./src/content/jobs.js","webpack:///./src/pages/jobs.js","webpack:///./src/components/banner/image-banner/image-banner.js"],"names":["TiberianGrid","props","_this","_React$Component","call","this","generateGridElement","elementData","index","selectedElements","gridElement","indexOf","react_default","a","createElement","className","key","image_blob","name","image","grayscale","onClick","e","restoreGrid","titlePosition","titleOps","description","href","console","log","activateGridElement","preventDefault","state","push","setState","generateDefaultGrid","data","self","assertThisInitialized_default","Fragment","map","dataPoint","i","render","gridContents","React","Component","tiberianGridData","link","ConnectPage","Helmet","charSet","layout","image_banner","page","title","tiberian_grid","ImageBanner","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_2__","query","style","backgroundImage","childImageSharp","fluid","src","_public_static_d_1613522706_json__WEBPACK_IMPORTED_MODULE_0__"],"mappings":"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","file":"component---src-pages-jobs-js-5fc9fd98a8f1727c91a8.js","sourcesContent":["import React from \"react\";\nimport ImageBlob from \"./../image-blob/image-blob\";\nimport \"./grids.css\";\n\nclass TiberianGrid extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedElements: [],\n            gridContents: this.generateDefaultGrid(props.data)\n        };\n        \n    }\n\n    generateGridElement = (elementData, index, selectedElements) => {\n        let gridElement;\n        if (selectedElements.indexOf(index) != -1) {\n            // This element is selected\n            gridElement = <div className=\"grid-element\" key={index}>\n                <ImageBlob name={elementData.image} grayscale=\"true\"/>\n                <div className=\"element-contents\">\n                    <div className=\"title-slide\">\n                        <div className=\"close-button\" onClick={(e) => this.restoreGrid(e)}>âœ•</div>\n                        <h2>{elementData.titlePosition}</h2>\n                        <h1>{elementData.titleOps}</h1>\n                        <p>{elementData.description}</p>           \n                        <a href=\"/asdjsadojosjd\">Apply here</a>\n                    </div>\n                </div>\n            </div>\n        }\n        \n        else {\n            gridElement = <div className=\"grid-element\" key={index}>\n                \n                <div className=\"element-contents\">\n                    <h2>{elementData.titlePosition}</h2>\n                    <h1>{elementData.titleOps}</h1>\n                </div>\n                <div className=\"overlay gray\"/>\n                <ImageBlob name={elementData.image} grayscale=\"true\"/>\n            </div>\n\n        }\n        console.log(\"Grid element generated\", gridElement);\n        return gridElement;\n    }\n\n    activateGridElement = (e, index) => {\n        e.preventDefault();\n        let selectedElements = this.state.selectedElements;\n        if (selectedElements.indexOf(index) === -1)\n            selectedElements.push(index);\n        else\n            console.log(\"Error: Element already selected\");\n        this.setState({selectedElements: selectedElements});\n    }\n\n\n    generateDefaultGrid = (data) => {\n        let self = this;\n        let newGridContents = <> {\n            data.map((dataPoint, i) => (\n                self.generateGridElement(dataPoint, i, [])\n            ))\n        } </>;\n        return newGridContents;\n    }\n\n\n    render = () => {\n        \n        return (\n            <div className=\"tiberian-grid\">\n                {this.state.gridContents}\n            </div>\n        )\n    }\n\n}\n\nexport default TiberianGrid;","import React from \"react\";\nimport {Link} from \"gatsby\"\n\nconst tiberianGridData = [\n    {\n        \"titlePosition\": \"Associate Director of\",\n        \"titleOps\": \"BUSINESS DEVELOPMENT AND ADVANCEMENT\",\n        \"image\": \"jobs1\",\n        \"description\": `\n        This first interactive experience with students allowed us to start explaining the process of design thinking and what SCD is all about. It was a blast!`,\n        \"link\": \"https://google.com\"\n    },\n    {\n        \"titlePosition\": \"Associate Director of\",\n        \"titleOps\": \"PROGRAMS\",\n        \"image\": \"jobs2\",\n        \"description\": `\n        This first interactive experience with students allowed us to start explaining the process of design thinking and what SCD is all about. It was a blast!`,\n        \"link\": \"https://google.com\"\n    },\n    {\n        \"titlePosition\": \"Associate Director of\",\n        \"titleOps\": \"OPERATIONS AND EXPERIENCE\",\n        \"image\": \"jobs3\",\n        \"description\": `\n        This first interactive experience with students allowed us to start explaining the process of design thinking and what SCD is all about. It was a blast!`,\n        \"link\": \"https://google.com\"\n    },\n    {\n        \"titlePosition\": \"\",\n        \"titleOps\": \"HEAD OF MARKETING\",\n        \"image\": \"jobs3\",\n        \"description\": `\n        This first interactive experience with students allowed us to start explaining the process of design thinking and what SCD is all about. It was a blast!`,\n        \"link\": \"https://google.com\"\n    },\n];\n\nexport {\n    tiberianGridData\n}","import React from \"react\"\nimport { Helmet } from \"react-helmet\";\nimport Layout from \"../components/layout\";\nimport ImageBanner from \"./../components/banner/image-banner/image-banner\";\nimport TiberianGrid from \"./../components/grids/tiberian-grid\";\nimport { tiberianGridData } from \"./../content/jobs\"\n\nconst ConnectPage = () => (\n    <>\n    <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>SCD / Jobs</title>\n    </Helmet>\n    <Layout>\n        <ImageBanner page=\"jobs\" title=\"join the SCD squad!\"/>\n        <div className=\"scd-cw-75\">\n            <TiberianGrid data={tiberianGridData}/>\n        </div>\n    </Layout>\n    </>\n)\n\nexport default ConnectPage\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport \"./image-banner.css\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `StaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.app/gatsby-image\n * - `StaticQuery`: https://gatsby.app/staticquery\n */\n\nconst ImageBanner = (props) => (\n  <StaticQuery\n    query={graphql`\n      query {\n        resources: file(relativePath: { eq: \"resources.jpg\" }) {\n          childImageSharp {\n            fluid(maxHeight: 1200) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        connect: file(relativePath: { eq: \"connect.png\" }) {\n          childImageSharp {\n            fluid(maxHeight: 1200) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        stories: file(relativePath: { eq: \"stories/banner.jpg\" }) {\n          childImageSharp {\n            fluid(maxHeight: 1200) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        courses: file(relativePath: { eq: \"courses/banner.jpg\" }) {\n          childImageSharp {\n            fluid(maxHeight: 1200) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        about: file(relativePath: { eq: \"about/banner.jpg\" }) {\n          childImageSharp {\n            fluid(maxHeight: 1200) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n        jobs: file(relativePath: { eq: \"jobs/banner.jpg\" }) {\n          childImageSharp {\n            fluid(maxHeight: 1200) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    `}\n    render={data =>\n    <>\n    <div className=\"image-banner\" style={\n      {\n        backgroundImage: `url(${data[props.page].childImageSharp.fluid.src})`\n      }\n    }>\n      <div className=\"text-line\">{props.title}</div>\n    </div>\n    </>\n}\n  />\n)\nexport default ImageBanner\n"],"sourceRoot":""}