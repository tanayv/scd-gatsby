{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.string.anchor.js","webpack:///./node_modules/core-js/modules/_string-html.js","webpack:///./node_modules/react-hammerjs/dist/react-hammerjs.es.js","webpack:///./node_modules/hammerjs/hammer.js"],"names":["__webpack_require__","createHTML","name","this","$export","fails","defined","quot","string","tag","attribute","value","S","String","p1","replace","module","exports","NAME","exec","O","P","F","test","toLowerCase","split","length","prop_types__WEBPACK_IMPORTED_MODULE_0__","prop_types__WEBPACK_IMPORTED_MODULE_0___default","n","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","_createClass","defineProperties","target","props","i","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","Hammer","window","undefined","privateProps","children","direction","options","recognizeWith","vertical","handlerToEvent","action","onDoubleTap","onPan","onPanCancel","onPanEnd","onPanStart","onPinch","onPinchCancel","onPinchEnd","onPinchIn","onPinchOut","onPinchStart","onPress","onPressUp","onRotate","onRotateCancel","onRotateEnd","onRotateMove","onRotateStart","onSwipe","onSwipeRight","onSwipeLeft","onSwipeUp","onSwipeDown","onTap","updateHammer","hammer","hasOwnProperty","console","warn","directionProp","get","set","keys","forEach","option","recognizers","gesture","recognizer","requireFailure","optionObj","p","e","off","on","HammerComponent","_React$Component","instance","TypeError","_classCallCheck","self","call","ReferenceError","_possibleConstructorReturn","__proto__","getPrototypeOf","apply","arguments","subClass","superClass","create","constructor","setPrototypeOf","_inherits","a","Component","domElement","stop","destroy","ref","cloneElement","Children","only","displayName","propTypes","className","__webpack_exports__","__WEBPACK_AMD_DEFINE_RESULT__","document","exportName","assign","VENDOR_PREFIXES","TEST_ELEMENT","createElement","TYPE_FUNCTION","round","Math","abs","now","Date","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","deprecate","method","message","deprecationMessage","Error","stack","log","output","index","source","nextKey","extend","dest","src","merge","inherit","child","base","properties","childP","baseP","_super","boolOrFn","val","args","ifUndefined","val1","val2","addEventListeners","types","handler","splitStr","type","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","inArray","findByKey","toArray","slice","uniqueArray","sort","results","values","push","b","prefixed","property","prefix","prop","camelProp","toUpperCase","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","navigator","userAgent","COMPUTE_INTERVAL","INPUT_START","INPUT_MOVE","INPUT_END","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","Input","manager","callback","inputTarget","domHandler","ev","enable","init","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","isFinal","session","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","offset","offsetDelta","prevDelta","prevInput","x","deltaX","y","deltaY","computeDeltaXY","offsetDirection","getDirection","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","scale","start","end","rotation","getRotation","maxPointers","velocity","velocityX","velocityY","last","lastInterval","v","computeIntervalInputData","srcEvent","computeInputData","emit","recognize","clientX","clientY","p2","sqrt","atan2","PI","evEl","evTarget","evWin","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","MouseInput","pressed","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","2","3","4","5","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","PointerEventInput","store","pointerEvents","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","isTouch","storeIndex","pointerId","splice","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","SingleTouchInput","started","touches","all","changed","changedTouches","concat","TOUCH_INPUT_MAP","TOUCH_TARGET_EVENTS","TouchInput","targetIds","allTouches","identifier","targetTouches","changedTargetTouches","filter","touch","DEDUP_TIMEOUT","DEDUP_DISTANCE","TouchMouseInput","mouse","primaryTouch","lastTouches","setLastTouch","eventData","lastTouch","lts","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","t","dx","dy","PREFIXED_TOUCH_ACTION","style","NATIVE_TOUCH_ACTION","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","touchMap","cssSupports","CSS","supports","getTouchActionProps","TouchAction","compute","actions","update","touchAction","getTouchAction","hasPanX","hasPanY","cleanTouchActions","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_POSSIBLE","STATE_BEGAN","STATE_CHANGED","STATE_ENDED","STATE_RECOGNIZED","STATE_CANCELLED","Recognizer","defaults","id","state","simultaneous","requireFail","stateStr","directionStr","getRecognizerByNameIfManager","otherRecognizer","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","preset","Manager","dropRecognizeWith","dropRequireFailure","hasRequireFailures","canRecognizeWith","event","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","inputClass","cssProps","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","handlers","oldCssProps","toggleCssProps","item","add","force","stopped","curRecognizer","existing","remove","events","data","gestureEvent","createEvent","initEvent","dispatchEvent","triggerDomEvent","STATE_FAILED","Tap","Pan","Swipe","Pinch","Rotate","Press"],"mappings":"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","file":"2-b685618e62f2751cd328.js","sourcesContent":["'use strict';\n// B.2.3.2 String.prototype.anchor(name)\nrequire('./_string-html')('anchor', function (createHTML) {\n  return function anchor(name) {\n    return createHTML(this, 'a', 'name', name);\n  };\n});\n","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// require('hammerjs') when in a browser. This is safe because Hammer is only\n// invoked in componentDidMount, which is not executed on the server.\nvar Hammer = typeof window !== 'undefined' ? require('hammerjs') : undefined;\n\nvar privateProps = {\n\tchildren: true,\n\tdirection: true,\n\toptions: true,\n\trecognizeWith: true,\n\tvertical: true\n};\n\n/**\n * Hammer Component\n * ================\n */\n\nvar handlerToEvent = {\n\taction: 'tap press',\n\tonDoubleTap: 'doubletap',\n\tonPan: 'pan',\n\tonPanCancel: 'pancancel',\n\tonPanEnd: 'panend',\n\tonPanStart: 'panstart',\n\tonPinch: 'pinch',\n\tonPinchCancel: 'pinchcancel',\n\tonPinchEnd: 'pinchend',\n\tonPinchIn: 'pinchin',\n\tonPinchOut: 'pinchout',\n\tonPinchStart: 'pinchstart',\n\tonPress: 'press',\n\tonPressUp: 'pressup',\n\tonRotate: 'rotate',\n\tonRotateCancel: 'rotatecancel',\n\tonRotateEnd: 'rotateend',\n\tonRotateMove: 'rotatemove',\n\tonRotateStart: 'rotatestart',\n\tonSwipe: 'swipe',\n\tonSwipeRight: 'swiperight',\n\tonSwipeLeft: 'swipeleft',\n\tonSwipeUp: 'swipeup',\n\tonSwipeDown: 'swipedown',\n\tonTap: 'tap'\n};\n\nObject.keys(handlerToEvent).forEach(function (i) {\n\tprivateProps[i] = true;\n});\n\nfunction updateHammer(hammer, props) {\n\tif (props.hasOwnProperty('vertical')) {\n\t\tconsole.warn('vertical is deprecated, please use `direction` instead');\n\t}\n\n\tvar directionProp = props.direction;\n\tif (directionProp || props.hasOwnProperty('vertical')) {\n\t\tvar direction = directionProp ? directionProp : props.vertical ? 'DIRECTION_ALL' : 'DIRECTION_HORIZONTAL';\n\t\thammer.get('pan').set({ direction: Hammer[direction] });\n\t\thammer.get('swipe').set({ direction: Hammer[direction] });\n\t}\n\n\tif (props.options) {\n\t\tObject.keys(props.options).forEach(function (option) {\n\t\t\tif (option === 'recognizers') {\n\t\t\t\tObject.keys(props.options.recognizers).forEach(function (gesture) {\n\t\t\t\t\tvar recognizer = hammer.get(gesture);\n\t\t\t\t\trecognizer.set(props.options.recognizers[gesture]);\n\t\t\t\t\tif (props.options.recognizers[gesture].requireFailure) {\n\t\t\t\t\t\trecognizer.requireFailure(props.options.recognizers[gesture].requireFailure);\n\t\t\t\t\t}\n\t\t\t\t}, this);\n\t\t\t} else {\n\t\t\t\tvar key = option;\n\t\t\t\tvar optionObj = {};\n\t\t\t\toptionObj[key] = props.options[option];\n\t\t\t\thammer.set(optionObj);\n\t\t\t}\n\t\t}, this);\n\t}\n\n\tif (props.recognizeWith) {\n\t\tObject.keys(props.recognizeWith).forEach(function (gesture) {\n\t\t\tvar recognizer = hammer.get(gesture);\n\t\t\trecognizer.recognizeWith(props.recognizeWith[gesture]);\n\t\t}, this);\n\t}\n\n\tObject.keys(props).forEach(function (p) {\n\t\tvar e = handlerToEvent[p];\n\t\tif (e) {\n\t\t\thammer.off(e);\n\t\t\thammer.on(e, props[p]);\n\t\t}\n\t});\n}\n\nvar HammerComponent = function (_React$Component) {\n\t_inherits(HammerComponent, _React$Component);\n\n\tfunction HammerComponent() {\n\t\t_classCallCheck(this, HammerComponent);\n\n\t\treturn _possibleConstructorReturn(this, (HammerComponent.__proto__ || Object.getPrototypeOf(HammerComponent)).apply(this, arguments));\n\t}\n\n\t_createClass(HammerComponent, [{\n\t\tkey: 'componentDidMount',\n\t\tvalue: function componentDidMount() {\n\t\t\tthis.hammer = new Hammer(this.domElement);\n\t\t\tupdateHammer(this.hammer, this.props);\n\t\t}\n\t}, {\n\t\tkey: 'componentDidUpdate',\n\t\tvalue: function componentDidUpdate() {\n\t\t\tif (this.hammer) {\n\t\t\t\tupdateHammer(this.hammer, this.props);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'componentWillUnmount',\n\t\tvalue: function componentWillUnmount() {\n\t\t\tif (this.hammer) {\n\t\t\t\tthis.hammer.stop();\n\t\t\t\tthis.hammer.destroy();\n\t\t\t}\n\t\t\tthis.hammer = null;\n\t\t}\n\t}, {\n\t\tkey: 'render',\n\t\tvalue: function render() {\n\t\t\tvar props = {};\n\n\t\t\tObject.keys(this.props).forEach(function (i) {\n\t\t\t\tif (!privateProps[i]) {\n\t\t\t\t\tprops[i] = this.props[i];\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\tvar self = this;\n\t\t\tprops.ref = function (domElement) {\n\t\t\t\tif (self.props.ref) {\n\t\t\t\t\tself.props.ref(domElement);\n\t\t\t\t}\n\t\t\t\tself.domElement = domElement;\n\t\t\t};\n\n\t\t\t// Reuse the child provided\n\t\t\t// This makes it flexible to use whatever element is wanted (div, ul, etc)\n\t\t\treturn React.cloneElement(React.Children.only(this.props.children), props);\n\t\t}\n\t}]);\n\n\treturn HammerComponent;\n}(React.Component);\n\nHammerComponent.displayName = 'Hammer';\nHammerComponent.propTypes = {\n\tclassName: PropTypes.string\n};\n\nexport default HammerComponent;\n","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n"],"sourceRoot":""}